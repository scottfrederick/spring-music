apply plugin: 'java'

apply plugin: 'eclipse-wtp'
apply plugin: 'idea'

apply plugin: 'tomcat'
apply plugin: 'war'

apply plugin: 'cloudfoundry'

allprojects {
    if (project.hasProperty('buildversion')) {
        project.version = project.buildversion
    } else {
        project.version = '1.0'
    }
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/resources'
            srcDir 'src/main/java'
        }
    }
}

sourceCompatibility = 1.7
targetCompatibility = 1.7
archivesBaseName = "spring-music"

jar {
    manifest {
        attributes 'Implementation-Title': 'Spring Sample Application', 'Implementation-Version': version
    }
}

buildscript {
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        classpath 'org.gradle.api.plugins:gradle-tomcat-plugin:1.2.5'
        classpath 'org.cloudfoundry:cf-gradle-plugin:1.1.1'
    }
}

repositories {
    mavenLocal()
    maven { url "http://repo.spring.io/release" }
    maven { url "http://repo.spring.io/milestone" }
    mavenCentral()
}

dependencies {
    // Spring and dependencies
    compile "org.springframework:spring-context:${springVersion}"
    compile "org.springframework:spring-webmvc:${springVersion}"

    // Spring Cloud
    compile "org.springframework.cloud:spring-cloud-spring-service-connector:${springCloudVersion}"
    compile "org.springframework.cloud:spring-cloud-cloudfoundry-connector:${springCloudVersion}"

    // Spring Data
    compile 'org.springframework.data:spring-data-jpa:1.5.2.RELEASE'
    compile 'org.springframework.data:spring-data-redis:1.4.2.RELEASE'
    compile 'org.springframework.data:spring-data-mongodb:1.4.2.RELEASE'

    // JPA Persistence
    compile "commons-dbcp:commons-dbcp:1.2.2"
    compile 'org.hibernate:hibernate-entitymanager:4.1.9.Final'
    runtime 'com.h2database:h2:1.3.162'
    runtime 'mysql:mysql-connector-java:5.1.25'
    runtime 'postgresql:postgresql:9.1-901-1.jdbc4'

    // Redis Persistence
    compile 'redis.clients:jedis:2.6.2'

    // JSR-303 validation
    compile 'javax.validation:validation-api:1.0.0.GA'
    compile 'org.hibernate:hibernate-validator:4.3.0.Final'

    // Webjars
    compile 'org.webjars:bootstrap:3.1.1'
    compile 'org.webjars:angularjs:1.2.16'
    compile 'org.webjars:angular-ui:0.4.0-2'
    compile 'org.webjars:angular-ui-bootstrap:0.10.0-1'
    compile 'org.webjars:jquery:2.1.0-2'

    // Jackson
    compile 'org.codehaus.jackson:jackson-core-asl:1.9.13'
    compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'
    compile "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"

    // Logging
    compile 'org.slf4j:slf4j-api:1.7.2'
    compile 'org.slf4j:slf4j-log4j12:1.7.2'

    // Servlet
    compile "javax.servlet:jstl:1.2"
    providedCompile 'javax.servlet:javax.servlet-api:3.0.1'

    // Testing
    testCompile 'junit:junit:4.8.2'

    // Spring Testing
    testCompile "org.springframework:spring-test:${springVersion}"

    // Tomcat
    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}"
    tomcat "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}"
    tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}") {
        exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.9'
}

war {
    // omit the version from the war file name
    ext.warversion = version
    version = ""
    manifest {
        attributes 'Implementation-Title': 'Spring Sample Application', 'Implementation-Version': ext.warversion
    }
}

tomcatRun {
    outputFile = file('tomcat.log')
}

cloudfoundry {
    target = "https://api.run.pivotal.io"
    space = "development"

    file = file("${war.archivePath}")
    uri = "spring-music-${randomWord}.cfapps.io"
    memory = 512
    instances = 1

    services {
        "music-mongodb" {
            label = "mongolab"
            plan = "sandbox"
        }
    }
}
